#!/usr/bin/env python

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import annotations

from tatsu.objectmodel import Node
from tatsu.semantics import ModelBuilderSemantics


class ModelBase(Node):
    pass


class ExpressionModelBuilderSemantics(ModelBuilderSemantics):
    def __init__(self, context=None, types=None):
        types = [
            t for t in globals().values()
            if type(t) is type and issubclass(t, ModelBase)
        ] + (types or [])
        super(ExpressionModelBuilderSemantics, self).__init__(context=context, types=types)


class SpiceExpression(ModelBase):
    pass


class GenericExpression(ModelBase):
    braced = None
    value = None


class BracedExpression(ModelBase):
    sep = None


class Expression(ModelBase):
    term = None
    ternary = None


class Ternary(ModelBase):
    op = None
    sep = None
    t = None
    x = None
    y = None


class Conditional(ModelBase):
    expr = None


class Or(ModelBase):
    left = None
    op = None
    right = None
    sep = None


class Xor(ModelBase):
    left = None
    op = None
    right = None
    sep = None


class And(ModelBase):
    left = None
    op = None
    right = None
    sep = None


class Not(ModelBase):
    op = None
    operator = None


class Relational(ModelBase):
    factor = None
    left = None
    op = None
    right = None
    sep = None


class ConditionalFactor(ModelBase):
    boolean = None
    expr = None
    sep = None


class Term(ModelBase):
    pass


class AddSub(ModelBase):
    left = None
    op = None
    right = None
    sep = None


class ProdDivMod(ModelBase):
    left = None
    op = None
    right = None
    sep = None


class Sign(ModelBase):
    op = None
    operator = None


class Exponential(ModelBase):
    left = None
    op = None
    right = None
    sep = None


class Functional(ModelBase):
    pass


class Variable(ModelBase):
    factor = None
    sep = None
    variable = None


class Factor(ModelBase):
    sep = None


class Functions(ModelBase):
    pass


class Value(ModelBase):
    imag = None
    real = None
    unit = None


class ImagValue(ModelBase):
    value = None


class RealValue(ModelBase):
    value = None


class NumberScale(ModelBase):
    scale = None
    value = None


class Unit(ModelBase):
    pass


class Hz(ModelBase):
    pass


class Float(ModelBase):
    pass


class Int(ModelBase):
    pass


class BinaryPattern(ModelBase):
    pattern = None


class Device(ModelBase):
    pass


class NetNode(ModelBase):
    node = None
    sep = None


class Separator(ModelBase):
    comment = None


class Comment(ModelBase):
    pass
